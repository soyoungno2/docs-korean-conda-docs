=================================
빌드 스크립트 (build.sh, bld.bat)
=================================

``build.sh`` 파일은 리눅스와 맥OS, ``bld.bat`` 파일은 윈도우에서 사용되는 빌드 스크립트다.
이 스크립트는 빌드 단계를 진행하는 로직(logic)을 포함한다. 전통적으로 빌드 스크립트는 설치 단계 또한 포함한다.
패키지 당 하나의 래시피를 사용하는 전통적인 빌드 방식에서 빌드 스크립트가
``$PREFIX``\ 나 ``%PREFIX%`` 폴더에 복사하는 모든 것은 출력된 패키지에 포함된다.
다음 ``build.sh`` 예시를 참고한다.

.. code-block:: bash

  mkdir -p $PREFIX/bin
  cp $RECIPE_DIR/my_script_with_recipe.sh $PREFIX/bin/super-cool-script.sh

pip를 사용해 PyPI에 패키지를 배포하지 않는다면 setup.py에
추가 파일을 포함시키는 적절한 방법을 고민하지 않아도 되므로 시간을 절약할 수 있다.

빌드 스크립트 파일에 사용할 수 있는 많은 환경 변수가 정의되어 있다. :ref:`env-vars`\ 를 참고한다.

콘다 빌드(conda build) 2.1부터 다중 패키지 출력을 정의할 수 있다.
각 패키지는 고유한 스크립트 파일이나 포함할 파일 목록을 가지고 있다.
다중 패키지 출력과 관련된 규칙은 :ref:`package-outputs`\ 에 문서화되어 있다.
출력 방식이 어떤식으로 정의되면 이는 ``$PREFIX``\ 에 있는 파일을 묶는 기본 규칙을 덮어쓴다.
따라서 하나의 래시피로 여러 패키지를 출력하면 ``build.sh``\ 나 ``bld.bat`` 파일의 설치 과정을 삭제하고
각 출력의 설치 스크립트에서 빌드를 대신 진행한다.

``build.sh``\ 나 ``bld.bat``\ 는 선택 사항이다. 이 파일 대신 ``meta.yaml``\ 의 문자열 명령이나
문자열 명령 목록을 값으로 갖는 ``build/script`` 키를 사용할 수 있다.
이 키에 넣는 명령은 빌드하고자 하는 모든 플랫폼에서 실행 가능해야 한다.
예를 들어 윈도우의 cmd.exe가 이해하지 못하는 ``cp`` 명령은 사용할 수 없다.

``build.sh``\ 는 ``bash``\ 로, ``bld.bat``\ 는 ``cmd.exe``\ 로 실행된다.

윈도우에서 배쉬(bash) 스크립트를 사용할 수 있도록 개발된 것들이 있지만 현재 지원되지 않는다.
