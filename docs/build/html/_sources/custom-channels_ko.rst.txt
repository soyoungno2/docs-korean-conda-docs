=================
 커스텀 채널
=================


채널은 콘다가 패키지를 보기 위해 선택하는 경로이며 커스텀 채널을 사용하고 관리하기 위한 가장 쉬운 방법은
`Anaconda.org <https://anaconda.org/>`_ 의 사설 혹은 공용 저장소를 사용하는 것이다.
`Anaconda.org <https://anaconda.org/>`_ 는 이전엔 Binstar.org 로 알려져 있었다.
당신의 Anaconda.org 저장소를 사설로 지정했다면 당신의 저장소에는 당신과 당신이 허용한 사람만 접근할 수 있다.

패키지를 인터넷에 업로드하고 싶지 않다면 웹서버를 통해 제공되거나 ``file://`` url 로 로컬에서 제공되는
커스텀 저장소를 생성할 수 있다.


커스텀 채널/ 사설 저장소 요약
-----------------------------------------

#. 플랫폼 하위 디렉토리에 패키지를 구성한다.
#. 각각의 플랫폼 하위 디렉토리에 콘다 인덱스를 실행한다.
#. 커스텀 채널을 테스트한다.


1. 플랫폼 하위 디렉토리에 패키지를 구성한다.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

커스텀 채널을 생성하기 위해 먼저 제공하고자 하는 플랫폼의 하위 디렉토리에 있는 모든 패키지를 구성한다.
예시:

.. code::

   channel/
  linux-64/
     package-1.0-0.tar.bz2
  linux-32/
     package-1.0-0.tar.bz2
  osx-64/
     package-1.0-0.tar.bz2
  win-64/
     package-1.0-0.tar.bz2
  win-32/
     package-1.0-0.tar.bz2


2. 각각의 플랫폼 하위 디렉토리에 콘다 인덱스를 실행한다.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

‘conda index’ 커맨드는 콘다 빌드 패키지의 일부이다.
아직 콘다 빌드를 사용하지 않았다면 콘다 빌드를 설치하는 것에서 시작한다. :

.. code::

   conda install conda-build

이제 아래와 같이 각각의 플랫폼 하위 디렉토리에 콘다 인덱스를 실행한다.

.. code::

   conda index channel/linux-64 channel/osx-64

콘다 인덱스 커맨드는 ``repodata.json`` 파일을 생성하고 각각의 저장소 디렉토리에 저장한다.
저장된 파일은 콘다가 채널의 패키지를 위한 메타 데이터를 얻을 때 사용한다.

주의: 채널의 패키지를 추가하거나 수정할 때 마다 반드시 ``conda index`` 를 다시 실행해 업데이트를 확인해야 한다.


3. 커스텀 채널을 테스트한다.
~~~~~~~~~~~~~~~~~~~~~~~

이제 웹서버나 채널 디렉토리로의 ``file:// url`` 을 사용해 커스텀 채널을 제공할 수 있다.
커스텀 채널로의 검색 커맨드를 보내 테스트한다.

예시: 만약 커스텀 채널 로케이션으로부터 얻고자 하는 파일이 ``/opt/channel/linux-64/`` 에 있다면

그 로케이션의 파일은 아래와 같이 검색한다.:

.. code::

   conda search -c file://opt/channel/ --override-channels

주의: 콘다가 자동으로 플랫폼을 감지하고 추가하기 때문에 채널 url은 플랫폼을 포함하지 않는다.

주의: --override-channels 커맨드는 콘다가 사용자가 지정한 채널 외에는 검색하지 않는다는 것을 확인하기 위함이다.
디폴트 채널이나 ``.condarc`` 에 목록화 된 채널은 검색하지 않는다.

사설 저장소를 잘 설정했다면 아래와 같이 나타난다.:

.. code::

   Fetching package metadata: . . . .

이후에 확인된 콘다 패키지의 목록이 나올 것이다.
이는 사용자의 사설 저장소가 성공적으로 생성되고 인덱싱 되었음을 보여준다.


