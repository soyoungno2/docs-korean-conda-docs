.\" DO NOT MODIFY THIS FILE!  It was generated by help2man 1.46.4.
.TH CONDA "1" "1ì›” 2018" "Anaconda, Inc." "User Commands"
.SH NAME
conda \- conda metapackage
.SH DESCRIPTION
usage: conda\-metapackage [\-h] [\-\-no\-anaconda\-upload] [\-\-token TOKEN]
.TP
[\-\-user USER] [\-\-build\-number BUILD_NUMBER]
[\-\-build\-string BUILD_STRING]
[\-\-dependencies [DEPENDENCIES [DEPENDENCIES ...]]]
[\-\-home HOME] [\-\-license LICENSE_NAME]
[\-\-summary SUMMARY]
[\-\-entry\-points [ENTRY_POINTS [ENTRY_POINTS ...]]]
[\-c CHANNEL] [\-\-override\-channels]
name version
.PP
Tool for building conda metapackages.  A metapackage is a package with no
files, only metadata.  They are typically used to collect several packages
together into a single package via dependencies.
.PP
NOTE: Metapackages can also be created by creating a recipe with the necessary
metadata in the meta.yaml, but a metapackage can be created entirely from the
command line with the conda metapackage command.
.SH OPTIONS
.SS "positional arguments:"
.TP
name
Name of the created package.
.TP
version
Version of the created package.
.SS "optional arguments:"
.TP
\fB\-h\fR, \fB\-\-help\fR
Show this help message and exit.
.TP
\fB\-\-no\-anaconda\-upload\fR
Do not ask to upload the package to anaconda.org.
.TP
\fB\-\-token\fR TOKEN
Token to pass through to anaconda upload
.TP
\fB\-\-user\fR USER
User/organization to upload packages to on
anaconda.org
.TP
\fB\-\-build\-number\fR BUILD_NUMBER
Build number for the package (default is 0).
.TP
\fB\-\-build\-string\fR BUILD_STRING
Build string for the package (default is automatically
generated).
.TP
\fB\-\-dependencies\fR [DEPENDENCIES [DEPENDENCIES ...]], \fB\-d\fR [DEPENDENCIES [DEPENDENCIES ...]]
The dependencies of the package. To specify a version
restriction for a dependency, wrap the dependency in
quotes, like 'package >=2.0'.
.TP
\fB\-\-home\fR HOME
The homepage for the metapackage.
.TP
\fB\-\-license\fR LICENSE_NAME
The license of the metapackage.
.TP
\fB\-\-summary\fR SUMMARY
Summary of the package. Pass this in as a string on
the command line, like \fB\-\-summary\fR 'A metapackage for
X'. It is recommended to use single quotes if you are
not doing variable substitution to avoid
interpretation of special characters.
.TP
\fB\-\-entry\-points\fR [ENTRY_POINTS [ENTRY_POINTS ...]]
Python entry points to create automatically. They
should use the same syntax as in the meta.yaml of a
recipe, e.g., \fB\-\-entry\-points\fR
bsdiff4=bsdiff4.cli:main_bsdiff4 will create an entry
point called bsdiff4 that calls
bsdiff4.cli.main_bsdiff4().
.TP
\fB\-c\fR CHANNEL, \fB\-\-channel\fR CHANNEL
Additional channel to search for packages. These are
URLs searched in the order they are given (including
file:// for local directories). Then, the defaults or
channels from .condarc are searched (unless
\fB\-\-override\-channels\fR is given). You can use 'defaults'
to get the default packages for conda, and 'system' to
get the system packages, which also takes .condarc
into account. You can also use any name and the
\&.condarc channel_alias value will be prepended. The
default channel_alias is http://conda.anaconda.org/.
.TP
\fB\-\-override\-channels\fR
Do not search default or .condarc channels. Requires
\fB\-\-channel\fR.
